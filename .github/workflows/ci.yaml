name: Application build and test
on:
    push:
        paths-ignore:
            - '.github/**'
env:
    java_version: '17'
    mvn_parameter: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -ntp'
    image_name: quay.io/heubeck/examiner
    builder_image: quay.io/quarkus/ubi-quarkus-mandrel-builder-image
jobs:
    ci:
        strategy:
            matrix:
                include:
                    - arch: amd64
                      builder_image_tag: 22.3.2.1-Final-java17-amd64
                    - arch: arm64
                      builder_image_tag: 22.3.2.1-Final-java17-arm64
        name: Application Build for ${{ matrix.arch }}
        runs-on: ubuntu-latest
        if: github.actor != 'dependabot[bot]'
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3

            - name: Setup Java
              uses: actions/setup-java@v3
              with:
                  java-version: '${{ env.java_version }}'
                  distribution: 'temurin'

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v2

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2
              with:
                platforms: linux/${{ matrix.arch }}

            - name: Application Build and Test
              env:
                QUARKUS_CONTAINER_IMAGE_BUILD: 'true'
                QUARKUS_CONTAINER_IMAGE_BUILDER: 'docker'
                QUARKUS_NATIVE_CONTAINER_RUNTIME_OPTIONS: '--platform=linux/${{ matrix.arch }}'
                QUARKUS_BUILDPACK_NATIVE_BUILDER_IMAGE: '${{ env.builder_image }}:${{ matrix.builder_image_tag }}'
                QUARKUS_DOCKER_BUILDX_PLATFORM: 'linux/${{ matrix.arch }}'
              run: |
                  skip_tests=""
                  # cannot exec arm binary during native tests on non-arm64 platform.
                  if [ "${{ matrix.arch }}" = "arm64" ]; then
                    skip_tests="-Dmaven.test.skip"
                  fi

                  mvn ${{ env.mvn_parameter }} $skip_tests clean verify -Pnative,dependency-scan
                  VERSION=$(mvn org.apache.maven.plugins:maven-help-plugin:3.1.0:evaluate -Dexpression=project.version -q -DforceStdout)
                  echo VERSION="$VERSION" >> $GITHUB_ENV

            - name: Login to quay.io
              uses: docker/login-action@v2
              if: github.ref == 'refs/heads/main'
              with:
                  registry: quay.io
                  username: ${{ secrets.QUAY_USER }}
                  password: ${{ secrets.QUAY_PASSWORD }}

            - name: Docker build
              uses: docker/build-push-action@v4
              with:
                  context: .
                  file: src/main/docker/Dockerfile
                  platforms: linux/${{ matrix.arch }}
                  tags: |
                      ${{ env.image_name }}:${{ env.VERSION }}-${{ matrix.arch }}
                  load: ${{ github.ref != 'refs/heads/main' }}
                  push: ${{ github.ref == 'refs/heads/main' }}

    docker:
        runs-on: ubuntu-latest
        needs: ci
        if: github.ref == 'refs/heads/main'
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3

            - name: Setup Java
              uses: actions/setup-java@v3
              with:
                  java-version: '${{ env.java_version }}'
                  distribution: 'temurin'

            - name: Determine version
              run: |
                  VERSION=$(mvn org.apache.maven.plugins:maven-help-plugin:3.1.0:evaluate -Dexpression=project.version -q -DforceStdout)
                  echo VERSION="$VERSION" >> $GITHUB_ENV

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Login to quay.io
              uses: docker/login-action@v2
              with:
                  registry: quay.io
                  username: ${{ secrets.QUAY_USER }}
                  password: ${{ secrets.QUAY_PASSWORD }}

            - name: Build manifest for ${{ env.VERSION }}
              run: |
                  docker buildx imagetools create -t "${image_name}:${VERSION}" \
                  "${image_name}:${VERSION}"-amd64 \
                  "${image_name}:${VERSION}"-arm64

                  docker buildx imagetools inspect "${image_name}:${VERSION}"

            - name: Build manifest for latest tag
              run: |
                  docker buildx imagetools create -t "${image_name}:latest" \
                  "${image_name}:${VERSION}"-amd64 \
                  "${image_name}:${VERSION}"-arm64

                  docker buildx imagetools inspect "${image_name}:latest"
